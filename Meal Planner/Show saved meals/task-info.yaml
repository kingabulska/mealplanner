type: edu
files:
- name: src/mealplanner/Main.kt
  visible: true
  text: |-
    package mealplanner

    fun main() {
        // write your code here
    }
  learner_created: false
- name: test/KotlinTest.java
  visible: false
  text: |-
    import mealplanner.MainKt;
    import org.hyperskill.hstest.stage.StageTest;

    public abstract class KotlinTest<T> extends StageTest<T> {

        protected final Class<?> classUnderTest;

        public KotlinTest() {
            super(MainKt.class);
            classUnderTest = MainKt.class;
        }
    }
  learner_created: false
- name: test/MealPlannerTest.kt
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.io.File

    class MealPlannerTest() : KotlinTest<String>() {

        private val dbName = "test.db"
        @DynamicTestingMethod
        open fun test(): CheckResult? {
            val main = TestedProgram(classUnderTest)

            main.start(dbName)
            main.execute("show")
            val output = main.execute("lunch")


            if (output != "No meal found.\n" +
                    "What would you like to do (add, show, exit)?\n") {
                return CheckResult.wrong("Wrong answer on  \"show\" command.")
            }
            return CheckResult.correct()
        }


        @DynamicTestingMethod
        open fun test2(): CheckResult? {


            val main = TestedProgram(classUnderTest)

            main.start(dbName)
            main.execute("add")
            main.execute("breakfast")
            main.execute("abracadabra")
            val output = main.execute("eggs, salmon, broccoli, cheese")



            main.execute("add")
            main.execute("lunch")
            main.execute("hawaii")
            val output2 = main.execute("pineapple, flowers")

            if (output2 != "Meal added!\nWhat would you like to do (add, show, exit)?\n") {
                return CheckResult.wrong("Wrong command ending.")
            }
            main.execute("exit")

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        open fun test3(): CheckResult? {
            val main = TestedProgram(classUnderTest)

            main.start(dbName)
            main.execute("show")
            val output = main.execute("dessert")

            if (output != "Wrong meal category! Choose from: breakfast, lunch, dinner.\n") {
                return CheckResult.wrong("Wrong answer on  \"show\" command.")
            }

            val output1 = main.execute("breakfast").split("\n").reversed()

            if (output1.isEmpty()) {
                return CheckResult.wrong("Database didn't persist data before program terminating.")
            }

            var isOk = true

            if (output1[2] != "cheese" || output1[3] != "broccoli"
                    || output1[4] != "salmon" || output1[5] != "eggs") {
                isOk = false
            }
            if (output1[7] != "Name: abracadabra") {
                isOk = false
            }

            if(!isOk) {
                return CheckResult.wrong("Wrong answer on  \"show\" command.")
            }

            main.execute("show")
            val output3 = main.execute("lunch").split("\n").reversed()

            isOk = true

            if (output3[2] != "flowers" || output3[3] != "pineapple"
                    ) {
                isOk = false
            }
            if (output3[5] != "Name: hawaii") {
                isOk = false
            }

            if(!isOk) {
                return CheckResult.wrong("Wrong answer on  \"show\" command.")
            }

            main.execute("exit")
            main.stop()

            val file = File(dbName)
            file.delete()

            return CheckResult.correct()
        }

    }
  learner_created: false
- name: src/mealplanner/Meal.kt
  visible: true
  text: |-
    package mealplanner

    import mealplanner.Category
    import mealplanner.Ingredient

    class Meal(
            val name: String,
            val category: Category,
            val ingredients: MutableList<Ingredient>
    ) {
    }
  learner_created: true
- name: src/mealplanner/Ingredient.kt
  visible: true
  text: |-
    package mealplanner

    class Ingredient(val name: String) {
    }
  learner_created: true
- name: src/main/sqldelight/mealplanner/sqldelight/categoriestable.sq
  visible: true
  text: |
    import mealplanner.Category;

    CREATE TABLE IF NOT EXISTS categories (
        category TEXT AS Category NOT NULL,
        meal_name TEXT NOT NULL,
        id_meal INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT
    );

    selectAll:
    SELECT *
    FROM categories
    ;

    insert:
    INSERT INTO categories (category, meal_name)
    VALUES (?, ?)
    ;

    sellectLastRowId:
    SELECT last_insert_rowid()
    ;

    sellectByCategory:
    SELECT *
    FROM categories
    WHERE category = ?
    ;
  learner_created: true
- name: src/mealplanner/Category.kt
  visible: true
  text: |
    package mealplanner

    enum class Category ( val category: String){
        BREAKFAST("breakfast"),
        LUNCH("lunch"),
        DINNER("dinner");

        companion object {
            fun fromString(string: String): Category {
                return values().first() {it.category == string}
            }
        }

    }
  learner_created: true
- name: src/main/sqldelight/mealplanner/sqldelight/ingredientstable.sq
  visible: true
  text: |-
    import mealplanner.Ingredient;

    CREATE TABLE IF NOT EXISTS ingredients (
        ingredient_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        ingredient_name TEXT NOT NULL,
        id_meal INTEGER NOT NULL,
        CONSTRAINT fk_meal FOREIGN KEY (id_meal)
        REFERENCES categories(id_meal)
    );

    insert:
    INSERT INTO ingredients (ingredient_name, id_meal)
    VALUES (?, ?)
    ;

    selectAllIngredientForOneMeal:
    SELECT ingredient_name
    FROM ingredients
    WHERE id_meal = ?
    ;
  learner_created: true
feedback_link: https://hyperskill.org/projects/129/stages/691/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/129/stages/691/implement">JetBrains
    Academy</a>
  time: Fri, 09 Oct 2020 18:46:27 UTC
record: 4
